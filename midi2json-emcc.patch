diff --git a/src/main.cpp b/src/main.cpp
index 15772e2..dc2348d 100644
--- a/src/main.cpp
+++ b/src/main.cpp
@@ -7,41 +7,18 @@
 #include <iostream>
 #include <cstdlib>
 #include <algorithm>
+#include <sstream>
+#include <stdexcept>
 ///#include <windows.h>
-unsigned x=1;
-unsigned dtick;
-unsigned dchannel;
-int irchannel;
-void Askfoir()
-{
-    std::cout << "Ignore rests on MIDI track (0 to disable): " << std::flush;
-    std::cin >> irchannel;
-}
-void Askforw()
-{
-    std::cout << "MIDI tick for Q: " << std::flush;
-    std::cin >> x;
-}
-void Askfordouble()
-{
-    std::cout << "MIDI track for 5<> (0 to disable): " << std::flush;
-    std::cin >> dchannel;
-    if (dchannel==0)
-        return;
-    std::cout << "MIDI tick for 5<>: " << std::flush;
-    std::cin >> dtick;
-}
-void Message(const std::string & text,bool iserror=false)
-{
-    std::cout << text << std::endl;
-    if (iserror)
-        abort();
-}
+unsigned _x=1;
+unsigned _dtick;
+unsigned _dchannel;
+int _irchannel;
 unsigned sd(unsigned & a,unsigned b)
 {
     if (b==0)
     {
-        Message("Dividing by zero.",true);
+        throw std::runtime_error("Dividing by zero.");
     }
     else
     {
@@ -53,7 +30,7 @@ unsigned sd(unsigned & a,unsigned b)
         }
         else
         {
-            Message("Dividing error.",true);
+            throw std::overflow_error("Dividing error.");
         }
     }
     return 0;
@@ -244,9 +221,7 @@ std::string Checkn(int n)
         return "#A-3";
     else if (n==21)
         return "A-3";
-    else
-        Message("Wrong note range.",true);
-    return "ERROR";
+    throw std::runtime_error("Wrong note range.");
 }
 std::string Checkd(unsigned t,bool mode)
 {
@@ -255,7 +230,7 @@ std::string Checkd(unsigned t,bool mode)
     {
         while (true)
         {
-            unsigned w=x;
+            unsigned w=_x;
             if (t>=w)
             {
                 t -= w;
@@ -302,7 +277,7 @@ std::string Checkd(unsigned t,bool mode)
                 result+='P';
             }
             else if (t<w)
-                Message("Wrong length value.",true);
+                throw std::runtime_error("Wrong length value.");
             if (t==0)
                 break;
         }
@@ -313,7 +288,7 @@ std::string Checkd(unsigned t,bool mode)
     {
         while (true)
         {
-            unsigned w=x;
+            unsigned w=_x;
             if (t>=w)
             {
                 t -= w;
@@ -360,7 +335,7 @@ std::string Checkd(unsigned t,bool mode)
                 result+='Y';
             }
             else if (t<w)
-                Message("Wrong length value.",true);
+                throw std::runtime_error("Wrong length value.");
             if (t==0)
                 break;
         }
@@ -407,12 +382,14 @@ class JsonTrack
 };
 class plik
 {
+    std::string output;
     MidiFile m;
     std::vector<JsonTrack*> JsonTracks;
     std::vector<std::string> warnings;
-    void ParseTracks()
+    std::string ParseTracks()
     {
-        std::ofstream logfile("log.txt");
+        std::stringstream logfile;
+        logfile << "Suggested tick/Q: " << m.getTicksPerQuarterNote() * 8;
         for (size_t CurrentTrack=0; CurrentTrack<JsonTracks.size(); ++CurrentTrack)
         {
             logfile << "\n\n" << "Track " << CurrentTrack + 1 << '\n' << std::endl;
@@ -420,7 +397,7 @@ class plik
             bool once;
             for (element* e : JsonTracks[CurrentTrack]->elements)
             {
-                if (doubler==false&&CurrentTrack+1==dchannel&&e->length==dtick)
+                if (doubler==false&&CurrentTrack+1==_dchannel&&e->length==_dtick)
                 {
                     doubler = true;
                     once = true;
@@ -436,39 +413,39 @@ class plik
                 if (doubler==true&&!once)
                 {
                     doubler=false;
-                    if (e->length!=dtick)
-                        Message("Fatal error with 5<>!",true);
+                    if (e->length!=_dtick)
+                        throw std::runtime_error("Fatal error with 5<>!");
                     logfile << '>';
                 }
                 logfile << ',' << std::flush;
             }
             if (doubler==true)
-                Message("5<> not closed!",true);
+                throw std::runtime_error("5<> not closed!");
         }
         if (!warnings.empty())
             logfile << "\n\n" << "Warnings" << '\n' << std::endl;
         for (std::string w : warnings)
             logfile << w << std::endl;
+        return logfile.str();
     }
 public:
-    plik()
+    plik(const char* filename, unsigned x, unsigned dtick, unsigned dchannel, int irchannel)
     {
-        do
+        if (m.read(filename)!=1)
         {
-            m.read(GetFilename("MIDI file < "));
+            throw std::runtime_error("Bad MIDI input.");
         }
-        while (m.status()!=1);
 
         m.linkNotePairs();
         if (m.getTrackCount()<1)
         {
-            Message("Wrong track number value.",true);
+            throw std::runtime_error("Wrong track number value.");
         }
         m.deltaTicks();
-        std::cout << "Suggested tick/Q: " << m.getTicksPerQuarterNote() * 8 << std::endl << std::endl;
-        Askforw();
-        Askfordouble();
-        Askfoir();
+        _x = x;
+        _dtick = dtick;
+        _dchannel = dchannel;
+        _irchannel = irchannel;
         for (int trak=0; trak<m.getTrackCount(); ++trak)
         {
             JsonTracks.push_back(new JsonTrack);
@@ -516,9 +493,9 @@ public:
                             if (irchannel==trak+1)
                             {
                                 if (JsonTracks.back()->elements.empty())
-                                    Message("No elements.",true);
+                                    throw std::runtime_error("No elements.");
                                 if (JsonTracks.back()->elements.back()->notes.empty())
-                                    Message("No notes.",true);
+                                    throw std::runtime_error("No notes.");
                                 JsonTracks.back()->elements.back()->length += m[trak][lastontick].tick;
                             }
                             // Add a rest as the element
@@ -543,7 +520,7 @@ public:
                             }
                         }
                         if (JsonTracks.back()->elements.back()->notes.empty())
-                            Message("No notes.",true);
+                            throw std::runtime_error("No notes.");
                         JsonTracks.back()->elements.back()->length = lastduration;
 
                         notevalues.clear();
@@ -554,7 +531,7 @@ public:
                 }
             }
         }
-        ParseTracks();
+        output = ParseTracks();
     }
     ~plik()
     {
@@ -563,10 +540,16 @@ public:
             delete t;
         }
     }
+    const char* getOutput()
+    {
+        return output.c_str();
+    }
 };
-int main()
+extern "C" {
+const char* processMidiFile(const char* filename, unsigned x, unsigned dtick, unsigned dchannel, int irchannel)
 {
-    plik p;
-    ///ShellExecute(0, 0, "log.txt", 0, 0 , SW_SHOWMAXIMIZED );
-    return 0;
+    plik p(filename, x, dtick, dchannel, irchannel);
+    const char* result = p.getOutput();
+    return result;
+}
 }
